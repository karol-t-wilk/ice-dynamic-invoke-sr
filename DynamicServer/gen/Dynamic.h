//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Dynamic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Dynamic_h__
#define __Dynamic_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Dynamic
{

class Longitude;
class Stations;
class StationsPrx;

}

namespace Dynamic
{

enum class LongitudeType : unsigned char
{
    N,
    S
};

enum class LatitudeType : unsigned char
{
    E,
    W
};

struct Latitude
{
    ::Dynamic::LatitudeType type;
    float value;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Dynamic::LatitudeType&, const float&> ice_tuple() const
    {
        return std::tie(type, value);
    }
};

struct Position
{
    ::std::shared_ptr<::Dynamic::Longitude> longitude;
    ::Dynamic::Latitude latitude;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Dynamic::Longitude>&, const ::Dynamic::Latitude&> ice_tuple() const
    {
        return std::tie(longitude, latitude);
    }
};

enum class ReadingType : unsigned char
{
    Temperature,
    Humidity,
    AirQuality
};

struct Reading
{
    ::Dynamic::ReadingType type;
    float value;
    long long int timestamp;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Dynamic::ReadingType&, const float&, const long long int&> ice_tuple() const
    {
        return std::tie(type, value, timestamp);
    }
};

using Readings = ::std::vector<Reading>;

class StationAlreadyExists : public ::Ice::UserExceptionHelper<StationAlreadyExists, ::Ice::UserException>
{
public:

    virtual ~StationAlreadyExists();

    StationAlreadyExists(const StationAlreadyExists&) = default;

    StationAlreadyExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static StationAlreadyExists _iceS_StationAlreadyExists_init;
/// \endcond

class StationNameEmpty : public ::Ice::UserExceptionHelper<StationNameEmpty, ::Ice::UserException>
{
public:

    virtual ~StationNameEmpty();

    StationNameEmpty(const StationNameEmpty&) = default;

    StationNameEmpty() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class StationNotFound : public ::Ice::UserExceptionHelper<StationNotFound, ::Ice::UserException>
{
public:

    virtual ~StationNotFound();

    StationNotFound(const StationNotFound&) = default;

    StationNotFound() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Dynamic
{

class Stations : public virtual ::Ice::Object
{
public:

    using ProxyType = StationsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void addStation(::std::string name, Position position, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addStation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addReadings(::std::string stationName, Readings readings, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addReadings(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Readings getReadings(::std::string stationName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getReadings(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Position getPosition(::std::string stationName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Dynamic
{

class Longitude : public ::Ice::ValueHelper<Longitude, ::Ice::Value>
{
public:

    virtual ~Longitude();

    Longitude() = default;

    Longitude(const Longitude&) = default;
    Longitude(Longitude&&) = default;
    Longitude& operator=(const Longitude&) = default;
    Longitude& operator=(Longitude&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Longitude(::Dynamic::LongitudeType type, float value) :
        type(type),
        value(value)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Dynamic::LongitudeType&, const float&> ice_tuple() const
    {
        return std::tie(type, value);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Dynamic::LongitudeType type;
    float value;
};

/// \cond INTERNAL
static Longitude _iceS_Longitude_init;
/// \endcond

}

namespace Dynamic
{

class StationsPrx : public virtual ::Ice::Proxy<StationsPrx, ::Ice::ObjectPrx>
{
public:

    void addStation(const ::std::string& name, const Position& position, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StationsPrx::_iceI_addStation, name, position, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addStationAsync(const ::std::string& name, const Position& position, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StationsPrx::_iceI_addStation, name, position, context);
    }

    ::std::function<void()>
    addStationAsync(const ::std::string& name, const Position& position,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Dynamic::StationsPrx::_iceI_addStation, name, position, context);
    }

    /// \cond INTERNAL
    void _iceI_addStation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const Position&, const ::Ice::Context&);
    /// \endcond

    void addReadings(const ::std::string& stationName, const Readings& readings, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StationsPrx::_iceI_addReadings, stationName, readings, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addReadingsAsync(const ::std::string& stationName, const Readings& readings, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StationsPrx::_iceI_addReadings, stationName, readings, context);
    }

    ::std::function<void()>
    addReadingsAsync(const ::std::string& stationName, const Readings& readings,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Dynamic::StationsPrx::_iceI_addReadings, stationName, readings, context);
    }

    /// \cond INTERNAL
    void _iceI_addReadings(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const Readings&, const ::Ice::Context&);
    /// \endcond

    Readings getReadings(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Dynamic::Readings>(true, this, &StationsPrx::_iceI_getReadings, stationName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getReadingsAsync(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Dynamic::Readings>>().get_future())
    {
        return _makePromiseOutgoing<::Dynamic::Readings, P>(false, this, &StationsPrx::_iceI_getReadings, stationName, context);
    }

    ::std::function<void()>
    getReadingsAsync(const ::std::string& stationName,
                     ::std::function<void(::Dynamic::Readings)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Dynamic::Readings>(std::move(response), std::move(ex), std::move(sent), this, &Dynamic::StationsPrx::_iceI_getReadings, stationName, context);
    }

    /// \cond INTERNAL
    void _iceI_getReadings(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Dynamic::Readings>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    Position getPosition(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Dynamic::Position>(true, this, &StationsPrx::_iceI_getPosition, stationName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPositionAsync(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Dynamic::Position>>().get_future())
    {
        return _makePromiseOutgoing<::Dynamic::Position, P>(false, this, &StationsPrx::_iceI_getPosition, stationName, context);
    }

    ::std::function<void()>
    getPositionAsync(const ::std::string& stationName,
                     ::std::function<void(::Dynamic::Position)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Dynamic::Position>(std::move(response), std::move(ex), std::move(sent), this, &Dynamic::StationsPrx::_iceI_getPosition, stationName, context);
    }

    /// \cond INTERNAL
    void _iceI_getPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Dynamic::Position>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    StationsPrx() = default;
    friend ::std::shared_ptr<StationsPrx> IceInternal::createProxy<StationsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Dynamic::LongitudeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Dynamic::LatitudeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Dynamic::Longitude, S>
{
    static void read(S* istr, ::Dynamic::Longitude& v)
    {
        istr->readAll(v.type, v.value);
    }
};

template<>
struct StreamableTraits<::Dynamic::Latitude>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Dynamic::Latitude, S>
{
    static void read(S* istr, ::Dynamic::Latitude& v)
    {
        istr->readAll(v.type, v.value);
    }
};

template<>
struct StreamableTraits<::Dynamic::Position>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Dynamic::Position, S>
{
    static void read(S* istr, ::Dynamic::Position& v)
    {
        istr->readAll(v.longitude, v.latitude);
    }
};

template<>
struct StreamableTraits< ::Dynamic::ReadingType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Dynamic::Reading>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Dynamic::Reading, S>
{
    static void read(S* istr, ::Dynamic::Reading& v)
    {
        istr->readAll(v.type, v.value, v.timestamp);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Dynamic
{

using LongitudePtr = ::std::shared_ptr<Longitude>;

using StationsPtr = ::std::shared_ptr<Stations>;
using StationsPrxPtr = ::std::shared_ptr<StationsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Dynamic
{

class Longitude;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Longitude>&);
::IceProxy::Ice::Object* upCast(Longitude*);
/// \endcond

class Stations;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Stations>&);
::IceProxy::Ice::Object* upCast(Stations*);
/// \endcond

}

}

namespace Dynamic
{

class Longitude;
/// \cond INTERNAL
::Ice::Object* upCast(Longitude*);
/// \endcond
typedef ::IceInternal::Handle< Longitude> LongitudePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Dynamic::Longitude> LongitudePrx;
typedef LongitudePrx LongitudePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LongitudePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Stations;
/// \cond INTERNAL
::Ice::Object* upCast(Stations*);
/// \endcond
typedef ::IceInternal::Handle< Stations> StationsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Dynamic::Stations> StationsPrx;
typedef StationsPrx StationsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(StationsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Dynamic
{

enum LongitudeType
{
    N,
    S
};

enum LatitudeType
{
    E,
    W
};

struct Latitude
{
    ::Dynamic::LatitudeType type;
    ::Ice::Float value;
};

struct Position
{
    ::Dynamic::LongitudePtr longitude;
    ::Dynamic::Latitude latitude;
};

enum ReadingType
{
    Temperature,
    Humidity,
    AirQuality
};

struct Reading
{
    ::Dynamic::ReadingType type;
    ::Ice::Float value;
    ::Ice::Long timestamp;
};

typedef ::std::vector<Reading> Readings;

class StationAlreadyExists : public ::Ice::UserException
{
public:

    StationAlreadyExists() {}

#ifdef ICE_CPP11_COMPILER
    StationAlreadyExists(const StationAlreadyExists&) = default;
    virtual ~StationAlreadyExists();
#else
    virtual ~StationAlreadyExists() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual StationAlreadyExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static StationAlreadyExists _iceS_StationAlreadyExists_init;
/// \endcond

class StationNameEmpty : public ::Ice::UserException
{
public:

    StationNameEmpty() {}

#ifdef ICE_CPP11_COMPILER
    StationNameEmpty(const StationNameEmpty&) = default;
    virtual ~StationNameEmpty();
#else
    virtual ~StationNameEmpty() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual StationNameEmpty* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class StationNotFound : public ::Ice::UserException
{
public:

    StationNotFound() {}

#ifdef ICE_CPP11_COMPILER
    StationNotFound(const StationNotFound&) = default;
    virtual ~StationNotFound();
#else
    virtual ~StationNotFound() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual StationNotFound* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace Dynamic
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Dynamic::Stations::begin_addStation.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addStation.
 */
class Callback_Stations_addStation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stations_addStation_Base> Callback_Stations_addStationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Dynamic::Stations::begin_addReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addReadings.
 */
class Callback_Stations_addReadings_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stations_addReadings_Base> Callback_Stations_addReadingsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Dynamic::Stations::begin_getReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getReadings.
 */
class Callback_Stations_getReadings_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stations_getReadings_Base> Callback_Stations_getReadingsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Dynamic::Stations::begin_getPosition.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getPosition.
 */
class Callback_Stations_getPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stations_getPosition_Base> Callback_Stations_getPositionPtr;

}

namespace IceProxy
{

namespace Dynamic
{

class Longitude : public virtual ::Ice::Proxy<Longitude, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Stations : public virtual ::Ice::Proxy<Stations, ::IceProxy::Ice::Object>
{
public:

    void addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addStation(_iceI_begin_addStation(name, position, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addStation(name, position, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addStation(name, position, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addStation(name, position, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Dynamic::Callback_Stations_addStationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addStation(name, position, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addStation(const ::std::string& name, const ::Dynamic::Position& position, const ::Ice::Context& context, const ::Dynamic::Callback_Stations_addStationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addStation(name, position, context, cb, cookie);
    }

    void end_addStation(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addStation(const ::std::string&, const ::Dynamic::Position&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addReadings(_iceI_begin_addReadings(stationName, readings, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addReadings(stationName, readings, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addReadings(stationName, readings, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addReadings(stationName, readings, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Dynamic::Callback_Stations_addReadingsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addReadings(stationName, readings, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addReadings(const ::std::string& stationName, const ::Dynamic::Readings& readings, const ::Ice::Context& context, const ::Dynamic::Callback_Stations_addReadingsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addReadings(stationName, readings, context, cb, cookie);
    }

    void end_addReadings(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addReadings(const ::std::string&, const ::Dynamic::Readings&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Dynamic::Readings getReadings(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getReadings(_iceI_begin_getReadings(stationName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getReadings(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getReadings(stationName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReadings(const ::std::string& stationName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getReadings(stationName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadings(const ::std::string& stationName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getReadings(stationName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadings(const ::std::string& stationName, const ::Dynamic::Callback_Stations_getReadingsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getReadings(stationName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getReadings(const ::std::string& stationName, const ::Ice::Context& context, const ::Dynamic::Callback_Stations_getReadingsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getReadings(stationName, context, cb, cookie);
    }

    ::Dynamic::Readings end_getReadings(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getReadings(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Dynamic::Position getPosition(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPosition(_iceI_begin_getPosition(stationName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::std::string& stationName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPosition(stationName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::std::string& stationName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPosition(stationName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::std::string& stationName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPosition(stationName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::std::string& stationName, const ::Dynamic::Callback_Stations_getPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPosition(stationName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::std::string& stationName, const ::Ice::Context& context, const ::Dynamic::Callback_Stations_getPositionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPosition(stationName, context, cb, cookie);
    }

    ::Dynamic::Position end_getPosition(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPosition(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Dynamic
{

class Longitude : public virtual ::Ice::Object
{
public:

    typedef LongitudePrx ProxyType;
    typedef LongitudePtr PointerType;

    virtual ~Longitude();

    Longitude()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Longitude(::Dynamic::LongitudeType type, ::Ice::Float value) :
        type(type),
        value(value)
    {
    }

#ifdef ICE_CPP11_COMPILER
    Longitude(const Longitude&) = default;
    Longitude& operator=(const Longitude&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Dynamic::LongitudeType type;
    ::Ice::Float value;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Longitude_init = ::Dynamic::Longitude::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Longitude& lhs, const Longitude& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Longitude& lhs, const Longitude& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Stations : public virtual ::Ice::Object
{
public:

    typedef StationsPrx ProxyType;
    typedef StationsPtr PointerType;

    virtual ~Stations();

#ifdef ICE_CPP11_COMPILER
    Stations() = default;
    Stations(const Stations&) = default;
    Stations& operator=(const Stations&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void addStation(const ::std::string& name, const Position& position, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addStation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addReadings(const ::std::string& stationName, const Readings& readings, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addReadings(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Readings getReadings(const ::std::string& stationName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getReadings(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Position getPosition(const ::std::string& stationName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPosition(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Stations& lhs, const Stations& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Stations& lhs, const Stations& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Dynamic::LongitudeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Dynamic::LatitudeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Dynamic::Longitude, S>
{
    static void write(S* ostr, const ::Dynamic::Longitude& v)
    {
        ostr->write(v.type);
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::Dynamic::Longitude, S>
{
    static void read(S* istr, ::Dynamic::Longitude& v)
    {
        istr->read(v.type);
        istr->read(v.value);
    }
};

template<>
struct StreamableTraits< ::Dynamic::Latitude>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Dynamic::Latitude, S>
{
    static void write(S* ostr, const ::Dynamic::Latitude& v)
    {
        ostr->write(v.type);
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::Dynamic::Latitude, S>
{
    static void read(S* istr, ::Dynamic::Latitude& v)
    {
        istr->read(v.type);
        istr->read(v.value);
    }
};

template<>
struct StreamableTraits< ::Dynamic::Position>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Dynamic::Position, S>
{
    static void write(S* ostr, const ::Dynamic::Position& v)
    {
        ostr->write(v.longitude);
        ostr->write(v.latitude);
    }
};

template<typename S>
struct StreamReader< ::Dynamic::Position, S>
{
    static void read(S* istr, ::Dynamic::Position& v)
    {
        istr->read(v.longitude);
        istr->read(v.latitude);
    }
};

template<>
struct StreamableTraits< ::Dynamic::ReadingType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Dynamic::Reading>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Dynamic::Reading, S>
{
    static void write(S* ostr, const ::Dynamic::Reading& v)
    {
        ostr->write(v.type);
        ostr->write(v.value);
        ostr->write(v.timestamp);
    }
};

template<typename S>
struct StreamReader< ::Dynamic::Reading, S>
{
    static void read(S* istr, ::Dynamic::Reading& v)
    {
        istr->read(v.type);
        istr->read(v.value);
        istr->read(v.timestamp);
    }
};

template<>
struct StreamableTraits< ::Dynamic::StationAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Dynamic::StationNameEmpty>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Dynamic::StationNotFound>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}
/// \endcond

namespace Dynamic
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Dynamic::Stations::begin_addStation.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addStation.
 */
template<class T>
class CallbackNC_Stations_addStation : public Callback_Stations_addStation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stations_addStation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_addStation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T> Callback_Stations_addStationPtr
newCallback_Stations_addStation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addStation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T> Callback_Stations_addStationPtr
newCallback_Stations_addStation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addStation<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T> Callback_Stations_addStationPtr
newCallback_Stations_addStation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addStation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T> Callback_Stations_addStationPtr
newCallback_Stations_addStation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addStation<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Dynamic::Stations::begin_addStation.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addStation.
 */
template<class T, typename CT>
class Callback_Stations_addStation : public Callback_Stations_addStation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stations_addStation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_addStation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T, typename CT> Callback_Stations_addStationPtr
newCallback_Stations_addStation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addStation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T, typename CT> Callback_Stations_addStationPtr
newCallback_Stations_addStation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addStation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T, typename CT> Callback_Stations_addStationPtr
newCallback_Stations_addStation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addStation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addStation.
 */
template<class T, typename CT> Callback_Stations_addStationPtr
newCallback_Stations_addStation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addStation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Dynamic::Stations::begin_addReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addReadings.
 */
template<class T>
class CallbackNC_Stations_addReadings : public Callback_Stations_addReadings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stations_addReadings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_addReadings(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addReadings<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addReadings<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addReadings<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_addReadings<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Dynamic::Stations::begin_addReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_addReadings.
 */
template<class T, typename CT>
class Callback_Stations_addReadings : public Callback_Stations_addReadings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stations_addReadings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_addReadings(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T, typename CT> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addReadings<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T, typename CT> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addReadings<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T, typename CT> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addReadings<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_addReadings.
 */
template<class T, typename CT> Callback_Stations_addReadingsPtr
newCallback_Stations_addReadings(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_addReadings<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Dynamic::Stations::begin_getReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getReadings.
 */
template<class T>
class CallbackNC_Stations_getReadings : public Callback_Stations_getReadings_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Readings&);

    CallbackNC_Stations_getReadings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        Readings ret;
        try
        {
            ret = proxy->end_getReadings(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getReadings.
 */
template<class T> Callback_Stations_getReadingsPtr
newCallback_Stations_getReadings(const IceUtil::Handle<T>& instance, void (T::*cb)(const Readings&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_getReadings<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getReadings.
 */
template<class T> Callback_Stations_getReadingsPtr
newCallback_Stations_getReadings(T* instance, void (T::*cb)(const Readings&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_getReadings<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Dynamic::Stations::begin_getReadings.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getReadings.
 */
template<class T, typename CT>
class Callback_Stations_getReadings : public Callback_Stations_getReadings_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Readings&, const CT&);

    Callback_Stations_getReadings(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        Readings ret;
        try
        {
            ret = proxy->end_getReadings(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getReadings.
 */
template<class T, typename CT> Callback_Stations_getReadingsPtr
newCallback_Stations_getReadings(const IceUtil::Handle<T>& instance, void (T::*cb)(const Readings&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_getReadings<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getReadings.
 */
template<class T, typename CT> Callback_Stations_getReadingsPtr
newCallback_Stations_getReadings(T* instance, void (T::*cb)(const Readings&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_getReadings<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Dynamic::Stations::begin_getPosition.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getPosition.
 */
template<class T>
class CallbackNC_Stations_getPosition : public Callback_Stations_getPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Position&);

    CallbackNC_Stations_getPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        Position ret;
        try
        {
            ret = proxy->end_getPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getPosition.
 */
template<class T> Callback_Stations_getPositionPtr
newCallback_Stations_getPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const Position&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_getPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getPosition.
 */
template<class T> Callback_Stations_getPositionPtr
newCallback_Stations_getPosition(T* instance, void (T::*cb)(const Position&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stations_getPosition<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Dynamic::Stations::begin_getPosition.
 * Create a wrapper instance by calling ::Dynamic::newCallback_Stations_getPosition.
 */
template<class T, typename CT>
class Callback_Stations_getPosition : public Callback_Stations_getPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Position&, const CT&);

    Callback_Stations_getPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StationsPrx proxy = StationsPrx::uncheckedCast(result->getProxy());
        Position ret;
        try
        {
            ret = proxy->end_getPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getPosition.
 */
template<class T, typename CT> Callback_Stations_getPositionPtr
newCallback_Stations_getPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const Position&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_getPosition<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Dynamic::Stations::begin_getPosition.
 */
template<class T, typename CT> Callback_Stations_getPositionPtr
newCallback_Stations_getPosition(T* instance, void (T::*cb)(const Position&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stations_getPosition<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
