//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Dynamic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Dynamic.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Dynamic::Longitude> iceC_Dynamic_Longitude_init("::Dynamic::Longitude");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Dynamic::StationAlreadyExists> iceC_Dynamic_StationAlreadyExists_init("::Dynamic::StationAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Dynamic::StationNameEmpty> iceC_Dynamic_StationNameEmpty_init("::Dynamic::StationNameEmpty");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Dynamic::StationNotFound> iceC_Dynamic_StationNotFound_init("::Dynamic::StationNotFound");

const ::std::string iceC_Dynamic_Stations_ids[2] =
{
    "::Dynamic::Stations",
    "::Ice::Object"
};
const ::std::string iceC_Dynamic_Stations_ops[] =
{
    "addReadings",
    "addStation",
    "getPosition",
    "getReadings",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Dynamic_Stations_addStation_name = "addStation";
const ::std::string iceC_Dynamic_Stations_addReadings_name = "addReadings";
const ::std::string iceC_Dynamic_Stations_getReadings_name = "getReadings";
const ::std::string iceC_Dynamic_Stations_getPosition_name = "getPosition";

}

Dynamic::StationAlreadyExists::~StationAlreadyExists()
{
}

const ::std::string&
Dynamic::StationAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Dynamic::StationAlreadyExists";
    return typeId;
}

Dynamic::StationNameEmpty::~StationNameEmpty()
{
}

const ::std::string&
Dynamic::StationNameEmpty::ice_staticId()
{
    static const ::std::string typeId = "::Dynamic::StationNameEmpty";
    return typeId;
}

Dynamic::StationNotFound::~StationNotFound()
{
}

const ::std::string&
Dynamic::StationNotFound::ice_staticId()
{
    static const ::std::string typeId = "::Dynamic::StationNotFound";
    return typeId;
}

bool
Dynamic::Stations::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Dynamic_Stations_ids, iceC_Dynamic_Stations_ids + 2, s);
}

::std::vector<::std::string>
Dynamic::Stations::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Dynamic_Stations_ids[0], &iceC_Dynamic_Stations_ids[2]);
}

::std::string
Dynamic::Stations::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Dynamic::Stations::ice_staticId()
{
    static const ::std::string typeId = "::Dynamic::Stations";
    return typeId;
}

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_addStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    Position iceP_position;
    istr->readAll(iceP_name, iceP_position);
    istr->readPendingValues();
    inS.endReadParams();
    this->addStation(::std::move(iceP_name), ::std::move(iceP_position), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_addReadings(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_stationName;
    Readings iceP_readings;
    istr->readAll(iceP_stationName, iceP_readings);
    inS.endReadParams();
    this->addReadings(::std::move(iceP_stationName), ::std::move(iceP_readings), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_getReadings(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_stationName;
    istr->readAll(iceP_stationName);
    inS.endReadParams();
    Readings ret = this->getReadings(::std::move(iceP_stationName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_getPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_stationName;
    istr->readAll(iceP_stationName);
    inS.endReadParams();
    Position ret = this->getPosition(::std::move(iceP_stationName), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Dynamic_Stations_ops, iceC_Dynamic_Stations_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Dynamic_Stations_ops)
    {
        case 0:
        {
            return _iceD_addReadings(in, current);
        }
        case 1:
        {
            return _iceD_addStation(in, current);
        }
        case 2:
        {
            return _iceD_getPosition(in, current);
        }
        case 3:
        {
            return _iceD_getReadings(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Dynamic::Longitude::~Longitude()
{
}

const ::std::string&
Dynamic::Longitude::ice_staticId()
{
    static const ::std::string typeId = "::Dynamic::Longitude";
    return typeId;
}

/// \cond INTERNAL
void
Dynamic::StationsPrx::_iceI_addStation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const Position& iceP_position, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_addStation_name);
    outAsync->invoke(iceC_Dynamic_Stations_addStation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_position);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const StationAlreadyExists&)
            {
                throw;
            }
            catch(const StationNameEmpty&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Dynamic::StationsPrx::_iceI_addReadings(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_stationName, const Readings& iceP_readings, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_addReadings_name);
    outAsync->invoke(iceC_Dynamic_Stations_addReadings_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stationName, iceP_readings);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const StationNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Dynamic::StationsPrx::_iceI_getReadings(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Dynamic::Readings>>& outAsync, const ::std::string& iceP_stationName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_getReadings_name);
    outAsync->invoke(iceC_Dynamic_Stations_getReadings_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stationName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const StationNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Dynamic::StationsPrx::_iceI_getPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Dynamic::Position>>& outAsync, const ::std::string& iceP_stationName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_getPosition_name);
    outAsync->invoke(iceC_Dynamic_Stations_getPosition_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stationName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const StationNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            Position ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Dynamic::StationsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StationsPrx>();
}
/// \endcond

const ::std::string&
Dynamic::StationsPrx::ice_staticId()
{
    return Stations::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Dynamic_Stations_addStation_name = "addStation";

const ::std::string iceC_Dynamic_Stations_addReadings_name = "addReadings";

const ::std::string iceC_Dynamic_Stations_getReadings_name = "getReadings";

const ::std::string iceC_Dynamic_Stations_getPosition_name = "getPosition";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Dynamic::StationAlreadyExists> iceC_Dynamic_StationAlreadyExists_init("::Dynamic::StationAlreadyExists");

}

#ifdef ICE_CPP11_COMPILER
Dynamic::StationAlreadyExists::~StationAlreadyExists()
{
}
#else
Dynamic::StationAlreadyExists::~StationAlreadyExists() throw()
{
}
#endif

::std::string
Dynamic::StationAlreadyExists::ice_id() const
{
    return "::Dynamic::StationAlreadyExists";
}

Dynamic::StationAlreadyExists*
Dynamic::StationAlreadyExists::ice_clone() const
{
    return new StationAlreadyExists(*this);
}

void
Dynamic::StationAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Dynamic::StationAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Dynamic::StationAlreadyExists", -1, true);
    ::Ice::StreamWriter< StationAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Dynamic::StationAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StationAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Dynamic::StationNameEmpty> iceC_Dynamic_StationNameEmpty_init("::Dynamic::StationNameEmpty");

}

#ifdef ICE_CPP11_COMPILER
Dynamic::StationNameEmpty::~StationNameEmpty()
{
}
#else
Dynamic::StationNameEmpty::~StationNameEmpty() throw()
{
}
#endif

::std::string
Dynamic::StationNameEmpty::ice_id() const
{
    return "::Dynamic::StationNameEmpty";
}

Dynamic::StationNameEmpty*
Dynamic::StationNameEmpty::ice_clone() const
{
    return new StationNameEmpty(*this);
}

void
Dynamic::StationNameEmpty::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Dynamic::StationNameEmpty::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Dynamic::StationNameEmpty", -1, true);
    ::Ice::StreamWriter< StationNameEmpty, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Dynamic::StationNameEmpty::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StationNameEmpty, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Dynamic::StationNotFound> iceC_Dynamic_StationNotFound_init("::Dynamic::StationNotFound");

}

#ifdef ICE_CPP11_COMPILER
Dynamic::StationNotFound::~StationNotFound()
{
}
#else
Dynamic::StationNotFound::~StationNotFound() throw()
{
}
#endif

::std::string
Dynamic::StationNotFound::ice_id() const
{
    return "::Dynamic::StationNotFound";
}

Dynamic::StationNotFound*
Dynamic::StationNotFound::ice_clone() const
{
    return new StationNotFound(*this);
}

void
Dynamic::StationNotFound::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Dynamic::StationNotFound::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Dynamic::StationNotFound", -1, true);
    ::Ice::StreamWriter< StationNotFound, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Dynamic::StationNotFound::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StationNotFound, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Dynamic::upCast(Longitude* p) { return p; }

void
::IceProxy::Dynamic::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Longitude>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Longitude;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Dynamic::Longitude::_newInstance() const
{
    return new Longitude;
}
/// \endcond

const ::std::string&
IceProxy::Dynamic::Longitude::ice_staticId()
{
    return ::Dynamic::Longitude::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Dynamic::upCast(Stations* p) { return p; }

void
::IceProxy::Dynamic::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Stations>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Stations;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Dynamic::Stations::_iceI_begin_addStation(const ::std::string& iceP_name, const ::Dynamic::Position& iceP_position, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_addStation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Dynamic_Stations_addStation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Dynamic_Stations_addStation_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_position);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Dynamic_Stations_addStation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Dynamic::Stations::end_addStation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Dynamic_Stations_addStation_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Dynamic::StationAlreadyExists&)
        {
            throw;
        }
        catch(const ::Dynamic::StationNameEmpty&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Dynamic::Stations::_iceI_begin_addReadings(const ::std::string& iceP_stationName, const ::Dynamic::Readings& iceP_readings, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_addReadings_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Dynamic_Stations_addReadings_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Dynamic_Stations_addReadings_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stationName);
        ostr->write(iceP_readings);
        result->endWriteParams();
        result->invoke(iceC_Dynamic_Stations_addReadings_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Dynamic::Stations::end_addReadings(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Dynamic_Stations_addReadings_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Dynamic::StationNotFound&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Dynamic::Stations::_iceI_begin_getReadings(const ::std::string& iceP_stationName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_getReadings_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Dynamic_Stations_getReadings_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Dynamic_Stations_getReadings_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stationName);
        result->endWriteParams();
        result->invoke(iceC_Dynamic_Stations_getReadings_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Dynamic::Readings
IceProxy::Dynamic::Stations::end_getReadings(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Dynamic_Stations_getReadings_name);
    ::Dynamic::Readings ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Dynamic::StationNotFound&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Dynamic::Stations::_iceI_begin_getPosition(const ::std::string& iceP_stationName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Dynamic_Stations_getPosition_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Dynamic_Stations_getPosition_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Dynamic_Stations_getPosition_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stationName);
        result->endWriteParams();
        result->invoke(iceC_Dynamic_Stations_getPosition_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Dynamic::Position
IceProxy::Dynamic::Stations::end_getPosition(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Dynamic_Stations_getPosition_name);
    ::Dynamic::Position ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Dynamic::StationNotFound&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Dynamic::Stations::_newInstance() const
{
    return new Stations;
}
/// \endcond

const ::std::string&
IceProxy::Dynamic::Stations::ice_staticId()
{
    return ::Dynamic::Stations::ice_staticId();
}

Dynamic::Longitude::~Longitude()
{
}

/// \cond INTERNAL
::Ice::Object* Dynamic::upCast(Longitude* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Dynamic::Longitude::ice_clone() const
{
    ::Ice::Object* p = new Longitude(*this);
    return p;
}

namespace
{
const ::std::string iceC_Dynamic_Longitude_ids[2] =
{
    "::Dynamic::Longitude",
    "::Ice::Object"
};

}

bool
Dynamic::Longitude::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Dynamic_Longitude_ids, iceC_Dynamic_Longitude_ids + 2, s);
}

::std::vector< ::std::string>
Dynamic::Longitude::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Dynamic_Longitude_ids[0], &iceC_Dynamic_Longitude_ids[2]);
}

const ::std::string&
Dynamic::Longitude::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Dynamic::Longitude::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Dynamic::Longitude";
    return typeId;
#else
    return iceC_Dynamic_Longitude_ids[0];
#endif
}

/// \cond STREAM
void
Dynamic::Longitude::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Longitude, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Dynamic::Longitude::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Longitude, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Dynamic::Longitude> iceC_Dynamic_Longitude_init("::Dynamic::Longitude");
}

::Ice::ValueFactoryPtr
Dynamic::Longitude::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Dynamic::Longitude::ice_staticId());
}

/// \cond INTERNAL
void
Dynamic::_icePatchObjectPtr(LongitudePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LongitudePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Longitude::ice_staticId(), v);
    }
}
/// \endcond

Dynamic::Stations::~Stations()
{
}

/// \cond INTERNAL
::Ice::Object* Dynamic::upCast(Stations* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Dynamic_Stations_ids[2] =
{
    "::Dynamic::Stations",
    "::Ice::Object"
};

}

bool
Dynamic::Stations::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Dynamic_Stations_ids, iceC_Dynamic_Stations_ids + 2, s);
}

::std::vector< ::std::string>
Dynamic::Stations::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Dynamic_Stations_ids[0], &iceC_Dynamic_Stations_ids[2]);
}

const ::std::string&
Dynamic::Stations::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Dynamic::Stations::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Dynamic::Stations";
    return typeId;
#else
    return iceC_Dynamic_Stations_ids[0];
#endif
}

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_addStation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    Position iceP_position;
    istr->read(iceP_name);
    istr->read(iceP_position);
    istr->readPendingValues();
    inS.endReadParams();
    this->addStation(iceP_name, iceP_position, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_addReadings(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_stationName;
    Readings iceP_readings;
    istr->read(iceP_stationName);
    istr->read(iceP_readings);
    inS.endReadParams();
    this->addReadings(iceP_stationName, iceP_readings, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_getReadings(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_stationName;
    istr->read(iceP_stationName);
    inS.endReadParams();
    Readings ret = this->getReadings(iceP_stationName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Dynamic::Stations::_iceD_getPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_stationName;
    istr->read(iceP_stationName);
    inS.endReadParams();
    Position ret = this->getPosition(iceP_stationName, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Dynamic_Stations_all[] =
{
    "addReadings",
    "addStation",
    "getPosition",
    "getReadings",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Dynamic::Stations::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Dynamic_Stations_all, iceC_Dynamic_Stations_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Dynamic_Stations_all)
    {
        case 0:
        {
            return _iceD_addReadings(in, current);
        }
        case 1:
        {
            return _iceD_addStation(in, current);
        }
        case 2:
        {
            return _iceD_getPosition(in, current);
        }
        case 3:
        {
            return _iceD_getReadings(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Dynamic::Stations::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Stations, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Dynamic::Stations::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Stations, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Dynamic::_icePatchObjectPtr(StationsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StationsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Stations::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
